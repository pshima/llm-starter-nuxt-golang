openapi: 3.0.3
info:
  title: Task Tracker API
  description: RESTful API for task management application
  version: 1.0.0
  contact:
    email: admin@tasktracker.com

servers:
  - url: http://localhost:8080/api/v1
    description: Development server

tags:
  - name: auth
    description: Authentication endpoints
  - name: tasks
    description: Task management endpoints
  - name: categories
    description: Category management endpoints

paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - displayName
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  minLength: 6
                  description: Must contain at least 1 special character and 1 number
                  example: Pass123!
                displayName:
                  type: string
                  minLength: 1
                  maxLength: 100
                  example: John Doe
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - auth
      summary: Login user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: Pass123!
                rememberMe:
                  type: boolean
                  default: true
                  description: Keep user logged in for 7 days
      responses:
        '200':
          description: Login successful
          headers:
            Set-Cookie:
              schema:
                type: string
                example: session=abc123; Path=/; HttpOnly; SameSite=Lax; Max-Age=604800
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'

  /auth/logout:
    post:
      tags:
        - auth
      summary: Logout user
      operationId: logoutUser
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully

  /auth/me:
    get:
      tags:
        - auth
      summary: Get current user info
      operationId: getCurrentUser
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Current user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /tasks:
    get:
      tags:
        - tasks
      summary: List user tasks
      operationId: listTasks
      security:
        - cookieAuth: []
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Filter by category
          example: work
        - in: query
          name: completed
          schema:
            type: boolean
          description: Filter by completion status
        - in: query
          name: includeDeleted
          schema:
            type: boolean
            default: false
          description: Include soft-deleted tasks
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  total:
                    type: integer
                    example: 10
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - tasks
      summary: Create a new task
      operationId: createTask
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - description
              properties:
                description:
                  type: string
                  minLength: 1
                  maxLength: 10000
                  example: Complete project documentation
                category:
                  type: string
                  maxLength: 100
                  example: work
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /tasks/{taskId}:
    get:
      tags:
        - tasks
      summary: Get task by ID
      operationId: getTask
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/taskId'
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - tasks
      summary: Soft delete a task
      operationId: deleteTask
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/taskId'
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Task deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /tasks/{taskId}/complete:
    put:
      tags:
        - tasks
      summary: Toggle task completion status
      operationId: toggleTaskComplete
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/taskId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - completed
              properties:
                completed:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /tasks/{taskId}/restore:
    post:
      tags:
        - tasks
      summary: Restore a soft-deleted task
      operationId: restoreTask
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/taskId'
      responses:
        '200':
          description: Task restored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /categories:
    get:
      tags:
        - categories
      summary: List user categories
      operationId: listCategories
      security:
        - cookieAuth: []
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: work
                        taskCount:
                          type: integer
                          example: 5
        '401':
          $ref: '#/components/responses/Unauthorized'

  /categories/{categoryName}:
    put:
      tags:
        - categories
      summary: Rename a category
      operationId: renameCategory
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: categoryName
          required: true
          schema:
            type: string
          description: Current category name
          example: work
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - newName
              properties:
                newName:
                  type: string
                  maxLength: 100
                  example: projects
      responses:
        '200':
          description: Category renamed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category renamed successfully
                  tasksUpdated:
                    type: integer
                    example: 5
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - categories
      summary: Delete a category
      operationId: deleteCategory
      description: Removes category from all tasks
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: categoryName
          required: true
          schema:
            type: string
          description: Category name to delete
          example: work
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category deleted successfully
                  tasksUpdated:
                    type: integer
                    example: 5
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: session

  parameters:
    taskId:
      in: path
      name: taskId
      required: true
      schema:
        type: string
        format: uuid
      description: Task UUID
      example: 123e4567-e89b-12d3-a456-426614174000

  schemas:
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          format: email
          example: user@example.com
        displayName:
          type: string
          example: John Doe
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T00:00:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T00:00:00Z

    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        userId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174001
        description:
          type: string
          maxLength: 10000
          example: Complete project documentation
        category:
          type: string
          nullable: true
          example: work
        completed:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T00:00:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T00:00:00Z
        deletedAt:
          type: string
          format: date-time
          nullable: true
          example: null

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: Invalid request
        code:
          type: string
          example: "1001"
        details:
          type: object
          additionalProperties: true

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'