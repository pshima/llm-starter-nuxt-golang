// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	"backend/internal/domain"
	
	"github.com/stretchr/testify/mock"
)

// MockTaskService is an autogenerated mock type for the TaskService type
type MockTaskService struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: userID, description, category
func (_m *MockTaskService) CreateTask(userID string, description string, category string) (*domain.Task, error) {
	ret := _m.Called(userID, description, category)

	var r0 *domain.Task
	var r1 error

	if rf, ok := ret.Get(0).(func(string, string, string) (*domain.Task, error)); ok {
		return rf(userID, description, category)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *domain.Task); ok {
		r0 = rf(userID, description, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(userID, description, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskByID provides a mock function with given fields: id, userID
func (_m *MockTaskService) GetTaskByID(id string, userID string) (*domain.Task, error) {
	ret := _m.Called(id, userID)

	var r0 *domain.Task
	var r1 error

	if rf, ok := ret.Get(0).(func(string, string) (*domain.Task, error)); ok {
		return rf(id, userID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *domain.Task); ok {
		r0 = rf(id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTasks provides a mock function with given fields: userID, filters
func (_m *MockTaskService) ListTasks(userID string, filters domain.TaskFilters) ([]*domain.Task, error) {
	ret := _m.Called(userID, filters)

	var r0 []*domain.Task
	var r1 error

	if rf, ok := ret.Get(0).(func(string, domain.TaskFilters) ([]*domain.Task, error)); ok {
		return rf(userID, filters)
	}
	if rf, ok := ret.Get(0).(func(string, domain.TaskFilters) []*domain.Task); ok {
		r0 = rf(userID, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string, domain.TaskFilters) error); ok {
		r1 = rf(userID, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTaskCompletion provides a mock function with given fields: id, userID, completed
func (_m *MockTaskService) UpdateTaskCompletion(id string, userID string, completed bool) (*domain.Task, error) {
	ret := _m.Called(id, userID, completed)

	var r0 *domain.Task
	var r1 error

	if rf, ok := ret.Get(0).(func(string, string, bool) (*domain.Task, error)); ok {
		return rf(id, userID, completed)
	}
	if rf, ok := ret.Get(0).(func(string, string, bool) *domain.Task); ok {
		r0 = rf(id, userID, completed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, bool) error); ok {
		r1 = rf(id, userID, completed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SoftDeleteTask provides a mock function with given fields: id, userID
func (_m *MockTaskService) SoftDeleteTask(id string, userID string) error {
	ret := _m.Called(id, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RestoreTask provides a mock function with given fields: id, userID
func (_m *MockTaskService) RestoreTask(id string, userID string) (*domain.Task, error) {
	ret := _m.Called(id, userID)

	var r0 *domain.Task
	var r1 error

	if rf, ok := ret.Get(0).(func(string, string) (*domain.Task, error)); ok {
		return rf(id, userID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *domain.Task); ok {
		r0 = rf(id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserCategories provides a mock function with given fields: userID
func (_m *MockTaskService) GetUserCategories(userID string) ([]string, error) {
	ret := _m.Called(userID)

	var r0 []string
	var r1 error

	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenameCategory provides a mock function with given fields: userID, oldName, newName
func (_m *MockTaskService) RenameCategory(userID string, oldName string, newName string) error {
	ret := _m.Called(userID, oldName, newName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(userID, oldName, newName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCategory provides a mock function with given fields: userID, categoryName
func (_m *MockTaskService) DeleteCategory(userID string, categoryName string) error {
	ret := _m.Called(userID, categoryName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userID, categoryName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}