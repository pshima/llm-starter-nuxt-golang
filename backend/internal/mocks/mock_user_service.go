// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	"backend/internal/domain"
	
	"github.com/stretchr/testify/mock"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

// Register provides a mock function with given fields: email, displayName, password
func (_m *MockUserService) Register(email string, displayName string, password string) (*domain.User, string, error) {
	ret := _m.Called(email, displayName, password)

	var r0 *domain.User
	var r1 string
	var r2 error

	if rf, ok := ret.Get(0).(func(string, string, string) (*domain.User, string, error)); ok {
		return rf(email, displayName, password)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *domain.User); ok {
		r0 = rf(email, displayName, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) string); ok {
		r1 = rf(email, displayName, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string, string) error); ok {
		r2 = rf(email, displayName, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Login provides a mock function with given fields: email, password
func (_m *MockUserService) Login(email string, password string) (*domain.User, string, error) {
	ret := _m.Called(email, password)

	var r0 *domain.User
	var r1 string
	var r2 error

	if rf, ok := ret.Get(0).(func(string, string) (*domain.User, string, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *domain.User); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(email, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Logout provides a mock function with given fields: sessionID
func (_m *MockUserService) Logout(sessionID string) error {
	ret := _m.Called(sessionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCurrentUser provides a mock function with given fields: sessionID
func (_m *MockUserService) GetCurrentUser(sessionID string) (*domain.User, error) {
	ret := _m.Called(sessionID)

	var r0 *domain.User
	var r1 error

	if rf, ok := ret.Get(0).(func(string) (*domain.User, error)); ok {
		return rf(sessionID)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = rf(sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}