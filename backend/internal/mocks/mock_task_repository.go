// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	"backend/internal/domain"
	
	"github.com/stretchr/testify/mock"
)

// MockTaskRepository is an autogenerated mock type for the TaskRepository type
type MockTaskRepository struct {
	mock.Mock
}

// CleanupExpiredTasks provides a mock function with no fields
func (_m *MockTaskRepository) CleanupExpiredTasks() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTask provides a mock function with given fields: task
func (_m *MockTaskRepository) CreateTask(task *domain.Task) error {
	ret := _m.Called(task)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Task) error); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCategory provides a mock function with given fields: userID, categoryName
func (_m *MockTaskRepository) DeleteCategory(userID string, categoryName string) error {
	ret := _m.Called(userID, categoryName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userID, categoryName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTaskByID provides a mock function with given fields: id
func (_m *MockTaskRepository) GetTaskByID(id string) (*domain.Task, error) {
	ret := _m.Called(id)

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Task, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Task); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserCategories provides a mock function with given fields: userID
func (_m *MockTaskRepository) GetUserCategories(userID string) ([]string, error) {
	ret := _m.Called(userID)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTasks provides a mock function with given fields: userID, filters
func (_m *MockTaskRepository) ListTasks(userID string, filters domain.TaskFilters) ([]*domain.Task, error) {
	ret := _m.Called(userID, filters)

	var r0 []*domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string, domain.TaskFilters) ([]*domain.Task, error)); ok {
		return rf(userID, filters)
	}
	if rf, ok := ret.Get(0).(func(string, domain.TaskFilters) []*domain.Task); ok {
		r0 = rf(userID, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string, domain.TaskFilters) error); ok {
		r1 = rf(userID, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenameCategory provides a mock function with given fields: userID, oldName, newName
func (_m *MockTaskRepository) RenameCategory(userID string, oldName string, newName string) error {
	ret := _m.Called(userID, oldName, newName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(userID, oldName, newName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RestoreTask provides a mock function with given fields: id
func (_m *MockTaskRepository) RestoreTask(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SoftDeleteTask provides a mock function with given fields: id
func (_m *MockTaskRepository) SoftDeleteTask(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTaskCompletion provides a mock function with given fields: id, completed
func (_m *MockTaskRepository) UpdateTaskCompletion(id string, completed bool) error {
	ret := _m.Called(id, completed)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(id, completed)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockTaskRepository creates a new instance of MockTaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mock's expectations.
func NewMockTaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskRepository {
	mock := &MockTaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}